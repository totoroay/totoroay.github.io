<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://totoroay.github.io/</id>
    <title>totoroay</title>
    <updated>2020-04-12T12:56:44.015Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://totoroay.github.io/"/>
    <link rel="self" href="https://totoroay.github.io/atom.xml"/>
    <subtitle>记录生活</subtitle>
    <logo>https://totoroay.github.io/images/avatar.png</logo>
    <icon>https://totoroay.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, totoroay</rights>
    <entry>
        <title type="html"><![CDATA[Mybatis环境搭建]]></title>
        <id>https://totoroay.github.io/post/mybatis-huan-jing-da-jian/</id>
        <link href="https://totoroay.github.io/post/mybatis-huan-jing-da-jian/">
        </link>
        <updated>2020-04-12T11:34:37.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-新建项目">1、新建项目</h2>
<h3 id="编写sql">编写SQL</h3>
<pre><code class="language-sql">CREATE DATABASE `mybatis`;

USE `mybatis`;

CREATE TABLE `user`(
  `id` INT(20) NOT NULL PRIMARY KEY,
  `name` VARCHAR(30) DEFAULT NULL,
  `pwd` VARCHAR(30) DEFAULT NULL
)ENGINE=INNODB DEFAULT CHARSET=utf8;

INSERT INTO `user`(`id`,`name`,`pwd`) VALUES 
(1,'totoroay','totoroay'),
(2,'二哈','22'),
(3,'张三','333')
(4,'李四','4444')
</code></pre>
<ol>
<li>
<p>新建一个普通的maven项目</p>
</li>
<li>
<p>删除src目录</p>
</li>
<li>
<p>导入maven依赖</p>
<pre><code class="language-xml"> &lt;!--父工程--&gt;
 
 &lt;!--导入依赖--&gt;
 &lt;dependencies&gt;
     &lt;!--mysql驱动--&gt;
     &lt;dependency&gt;
         &lt;groupId&gt;mysql&lt;/groupId&gt;
         &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
         &lt;version&gt;5.1.47&lt;/version&gt;
     &lt;/dependency&gt;
     &lt;!--mybatis--&gt;
     &lt;dependency&gt;
         &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
         &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
         &lt;version&gt;3.5.2&lt;/version&gt;
     &lt;/dependency&gt;
     &lt;!--junit--&gt;
     &lt;dependency&gt;
         &lt;groupId&gt;junit&lt;/groupId&gt;
         &lt;artifactId&gt;junit&lt;/artifactId&gt;
         &lt;version&gt;4.12&lt;/version&gt;
     &lt;/dependency&gt;
     &lt;!--导入lombok插件，还需在setting-&gt;Plugins中下载--&gt;
     &lt;dependency&gt;
         &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
         &lt;artifactId&gt;lombok&lt;/artifactId&gt;
         &lt;version&gt;1.18.10&lt;/version&gt;
     &lt;/dependency&gt;
 &lt;/dependencies&gt;

 &lt;!--在build中配置resources，来防止我们资源导出失败的问题--&gt;
 &lt;build&gt;
     &lt;resources&gt;
         &lt;resource&gt;
             &lt;directory&gt;src/main/resources&lt;/directory&gt;
             &lt;includes&gt;
                 &lt;include&gt;**/*.properties&lt;/include&gt;
                 &lt;include&gt;**/*.xml&lt;/include&gt;
             &lt;/includes&gt;
             &lt;filtering&gt;true&lt;/filtering&gt;
         &lt;/resource&gt;
         &lt;resource&gt;
             &lt;directory&gt;src/main/java&lt;/directory&gt;
             &lt;includes&gt;
                 &lt;include&gt;**/*.properties&lt;/include&gt;
                 &lt;include&gt;**/*.xml&lt;/include&gt;
             &lt;/includes&gt;
             &lt;filtering&gt;true&lt;/filtering&gt;
         &lt;/resource&gt;
     &lt;/resources&gt;
 &lt;/build&gt;
</code></pre>
</li>
</ol>
<h2 id="2-创建一个模块">2、创建一个模块</h2>
<ul>
<li>
<p>在resources目录下编写mybatis的核心配置文件：mybatis-config.xml</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
  &lt;!DOCTYPE configuration
      PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
      &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
  &lt;!--configuration核心配置文件--&gt;
  &lt;configuration&gt;

  &lt;!--引入外部配置文件--&gt;
  &lt;properties resource=&quot;db.properties&quot;/&gt;

  &lt;settings&gt;
      &lt;!--日志--&gt;
      &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt;
      &lt;!--log4j日志--&gt;
      &lt;!--&lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&gt;--&gt;
      &lt;!--开启驼峰命名--&gt;
      &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;
      &lt;!--显示开启缓存--&gt;
      &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;
  &lt;/settings&gt;

  &lt;!--设置别名--&gt;
  &lt;typeAliases&gt;
      &lt;package name=&quot;com.totoroay.pojo&quot;/&gt;
  &lt;/typeAliases&gt;

  &lt;environments default=&quot;development&quot;&gt;
      &lt;environment id=&quot;development&quot;&gt;
          &lt;transactionManager type=&quot;JDBC&quot;/&gt;
          &lt;dataSource type=&quot;POOLED&quot;&gt;
              &lt;property name=&quot;driver&quot; value=&quot;${driver}&quot;/&gt;
              &lt;property name=&quot;url&quot; value=&quot;${url}&quot;/&gt;
              &lt;property name=&quot;username&quot; value=&quot;${username}&quot;/&gt;
              &lt;property name=&quot;password&quot; value=&quot;${password}&quot;/&gt;
          &lt;/dataSource&gt;
      &lt;/environment&gt;

      &lt;environment id=&quot;test&quot;&gt;
          &lt;transactionManager type=&quot;JDBC&quot;/&gt;
          &lt;dataSource type=&quot;POOLED&quot;&gt;
              &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
              &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8&quot;/&gt;
              &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;
              &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;
          &lt;/dataSource&gt;
      &lt;/environment&gt;
  &lt;/environments&gt;

  &lt;mappers&gt;
      &lt;mapper resource=&quot;mapper/UserMapper.xml&quot;/&gt;
  &lt;/mappers&gt;
  &lt;/configuration&gt;
</code></pre>
</li>
<li>
<p>同样在resources目录下编写外部配置文件：db.properties</p>
<pre><code class="language-properties">  driver=com.mysql.jdbc.Driver
  url=jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;amp;useUnicode=true&amp; amp;characterEncoding=UTF-8
  username=root
  password=root
</code></pre>
</li>
<li>
<p>编写log4j外部配置文件：log4j.properties</p>
<pre><code class="language-properties">  #将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面码
  log4j.rootLogger=DEBUG,console,file

  #控制台输出的相关设置
  log4j.appender.console = org.apache.log4j.ConsoleAppender
  log4j.appender.console.Target = System.out
  log4j.appender.console.Threshold=DEBUG
  log4j.appender.console.layout = org.apache.log4j.PatternLayout
  log4j.appender.console.layout.ConversionPattern=[%c]-%m%n

  #文件输出的相关设置
  log4j.appender.file = org.apache.log4j.RollingFileAppender
  log4j.appender.file.File=./log/totoroay.log
  log4j.appender.file.MaxFileSize=10mb
  log4j.appender.file.Threshold=DEBUG
  log4j.appender.file.layout=org.apache.log4j.PatternLayout
  log4j.appender.file.layout.ConversionPattern=[%p][%d{yy-MM-dd}][%c]%m%n

  #日志输出级别
  log4j.logger.org.mybatis=DEBUG
  log4j.logger.java.sql=DEBUG
  log4j.logger.java.sql.Statement=DEBUG
  log4j.logger.java.sql.ResultSet=DEBUG
  log4j.logger.java.sql.PreparedStatement=DEBUG
</code></pre>
</li>
<li>
<p>编写mybatis工具类</p>
<pre><code class="language-java">//sqlSessionFactory --&gt; sqlSession
public class MybatisUtils {

    private static SqlSessionFactory sqlSessionFactory;

    static{
        try {
            //使用Mybatis第一步：获取sqlSessionFactory对象
            String resource = &quot;mybatis-config.xml&quot;;
            InputStream inputStream = Resources.getResourceAsStream(resource);
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    //既然有了 SqlSessionFactory，顾名思义，我们就可以从中获得 SqlSession 的实例了。
    // SqlSession 完全包含了面向数据库执行 SQL 命令所需的所有方法。
    public static SqlSession  getSqlSession(){
        return sqlSessionFactory.openSession();
    }

}
</code></pre>
</li>
</ul>
<h2 id="3-编写代码">3、编写代码</h2>
<ul>
<li>编写用户实体类：User</li>
</ul>
<pre><code class="language-java">@Data
@NoArgsConstructor
@AllArgsConstructor
public class User implements Serializable {
    private int id;
    private String name;
    private String pwd;
}
</code></pre>
<ul>
<li>编写接口：UserMapper</li>
</ul>
<pre><code class="language-java">public interface UserMapper {
    User queryUserById(int id);
    int updateUser(User user);
}
</code></pre>
<ul>
<li>在resources目录下新建mapper创建实现接口的xml配置文件：UserMapper.xml</li>
</ul>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.totoroay.dao.UserMapper&quot;&gt;
    &lt;cache eviction=&quot;FIFO&quot; flushInterval=&quot;60000&quot; size=&quot;512&quot; readOnly=&quot;true&quot;/&gt;

    &lt;select id=&quot;queryUserById&quot; resultType=&quot;User&quot;&gt;
        select * from user where id = #{id}
    &lt;/select&gt;

    &lt;update id=&quot;updateUser&quot; parameterType=&quot;user&quot;&gt;
        update user set name = #{name}, pwd = #{pwd} where id = #{id};
    &lt;/update&gt;

&lt;/mapper&gt;
</code></pre>
<h2 id="4-测试">4、 测试</h2>
<pre><code class="language-java">@Test
    public void findAllUser(){
        SqlSession sqlSession = MybatisUtils.getSqlSession();
        UserMapper mapper = sqlSession.getMapper(UserMapper.class);
        List&lt;User&gt; allUser = mapper.findAllUser();
        for (User user : allUser) {
            System.out.println(user);
        }
        sqlSession.close();
    }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mybatis简介]]></title>
        <id>https://totoroay.github.io/post/mybatis-bi-ji/</id>
        <link href="https://totoroay.github.io/post/mybatis-bi-ji/">
        </link>
        <updated>2020-04-12T11:18:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="11-什么是mybatis">1.1、什么是Mybatis</h3>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong></li>
<li>它支持定制化 SQL、存储过程以及高级映射。</li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li>
<li>MyBatis 本是<a href="https://baike.baidu.com/item/apache/6265">apache</a>的一个开源项目<a href="https://baike.baidu.com/item/iBatis">iBatis</a>, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。</li>
<li>2013年11月迁移到Github。</li>
</ul>
<p>如何获得Mybatis？</p>
<ul>
<li>
<p>maven仓库：</p>
<pre><code class="language-xml">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
    &lt;version&gt;3.5.2&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
</li>
<li>
<p>Github ： https://github.com/mybatis/mybatis-3/releases</p>
</li>
<li>
<p>中文文档：https://mybatis.org/mybatis-3/zh/index.html</p>
</li>
<li>
<p>Maven仓库：https://mvnrepository.com/</p>
</li>
</ul>
<h3 id="12-持久化">1.2、持久化</h3>
<p>数据持久化</p>
<ul>
<li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li>
<li>内存：<strong>断电即失</strong></li>
<li>数据库(Jdbc)，io文件持久化。</li>
<li>生活：冷藏. 罐头。</li>
</ul>
<p><strong>为什么需要需要持久化？</strong></p>
<ul>
<li>
<p>有一些对象，不能让他丢掉。</p>
</li>
<li>
<p>内存太贵了</p>
</li>
</ul>
<h3 id="13-持久层">1.3、持久层</h3>
<p>Dao层，Service层，Controller层….</p>
<ul>
<li>完成持久化工作的代码块</li>
<li>层界限十分明显。</li>
</ul>
<h3 id="14-为什么需要mybatis">1.4 为什么需要Mybatis？</h3>
<ul>
<li>帮助程序猿将数据存入到数据库中。</li>
<li>方便</li>
<li>传统的JDBC代码太复杂了。简化。框架。自动化。</li>
<li>不用Mybatis也可以。更容易上手。 <strong>技术没有高低之分</strong></li>
<li>优点：
<ul>
<li>简单易学</li>
<li>灵活</li>
<li>sql和代码的分离，提高了可维护性。</li>
<li>提供映射标签，支持对象与数据库的orm字段关系映射</li>
<li>提供对象关系映射标签，支持对象关系组建维护</li>
<li>提供xml标签，支持编写动态sql。</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
</feed>